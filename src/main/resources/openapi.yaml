openapi: "3.0.0"
info:
  version: 0.0.1
  title: User Service
servers:
  - url: http://localhost/
tags:
- name: user
  description: CRUD users
# schemes:
# - http
paths:
  /users:
    get:
      tags: 
        - user
      summary: Get users
      description: Get users list
      operationId: getUser
      parameters:
        - name: limit
          in: query
          description: number of users in one page.
          required: false
          schema:
            type: integer
            default: 15
        - name: offset
          in: query
          description: numbers of users to skip.
          required: false
          schema:
            type: integer
            default: 0
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortUserDto'
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        description: Created user object
        required: true
  '/users/{id}':
    get:
      tags:
        - user
      summary: Find user by ID
      description: Returns a single user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updates a user with form data
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of user that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        description: Update user
        required: true
    delete:
      tags:
        - user
      summary: Deletes a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          description: user`s id
          format: int64
        username:
          type: string
          description: user`s username
          minLength: 3
          maxLength: 30
        firstName:
          type: string
          description: user`s firstName
          minLength: 3
          maxLength: 30
        lastName:
          type: string
          description: user`s lastname
          minLength: 3
          maxLength: 30
        email:
          type: string
          description: user`s email
          minLength: 3
          maxLength: 30
        description:
          type: string
          description: some information about user
          minLength: 0
          maxLength: 1200
      xml:
        name: User
    ShortUserDto:
      type: object
      properties:
        id:
          type: integer
          description: user`s id
          format: int64
        username:
          type: string
          description: user`s username
          minLength: 3
          maxLength: 30
        firstName:
          type: string
          description: user`s firstName
          minLength: 3
          maxLength: 30
        lastName:
          type: string
          description: user`s lastname
          minLength: 3
          maxLength: 30
        email:
          type: string
          description: user`s email
          minLength: 3
          maxLength: 30
      xml:
        name: User
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserDto'
        application/xml:
          schema:
            $ref: '#/components/schemas/UserDto'
      description: User object that needs to be added
      required: true